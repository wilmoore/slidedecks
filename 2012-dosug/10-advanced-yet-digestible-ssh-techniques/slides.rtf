{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs36 10 advanced, yet digestible SSH techniques\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Introduction + About Me\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Hey everyone...my name is Wil Moore III\par}
{\pard \ql \f0 \sa180 \li0 \fi0 I work for Net-Results...a marketing automation company in Golden.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 As a Full-Stack web developer, on a daily basis, I work in multiple programming languages such as Ruby, JavaScript on the server and browser, and PHP, as well as devops and user interface work.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 I should start off by sharing with you, why I like this topic. Why SSH?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 See, early on in my career, SSH seemed like a black box. I knew the basics, but all you could do with SSH hadn't yet clicked.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Fast forward to when I started doing more continuous integration as part of a continuous delivery strategy...that's when it all came together.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 So tonight, I'll share with you a few semi-advanced techniques that won't seem very-advanced once we get em' to click for you.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 Now, if you're already an SSH wizard...this'll be more of a refresher.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 That being said, how many of you (show of hands) are already familiar with SSH?\par}
{\pard \ql \f0 \sa180 \li0 \fi0 OK, so, this talk is 10 SSH techniques; however, we are going to do a quick refresher first.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 \b \fs32 Key Generation Style\par}
{\pard \ql \f0 \sa180 \li0 \fi0 You are all likely familiar with generating keys; however, I'd like to share with you the key generation style that I use. I encourage you to come up with your own; but this is mine.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 We generate {\f1 rsa} keys with a comment consisting of a user, an application, and an environment. In this example, we create a key for a "deploy" user in an application called "uworkremote" and the environment is CI (continuous integration).\par}
{\pard \ql \f0 \sa180 \li0 \fi0 As you can see, this style scales well in multi-environment setups.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 I'm sure you've seen $HOME/.ssh/id_rsa.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This is a terrible default. It alludes to only ever using a single key pair.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 This isn't realistic; you don't want to use the same key everywhere. Now, keep it reasonable of course, but one key for everything is not a good idea security-wise.\par}
{\pard \ql \f0 \sa180 \li0 \fi0 In other words, when you build your startup app on Amazon EC2 don't go sharing those EC2 keys with the nodes back at your 9-5.\par}

